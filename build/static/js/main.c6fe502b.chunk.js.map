{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Home.js","utilities/api.js","components/Weather.js","components/Counter.js","components/Todos.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMenu","useState","collapsed","setCollapsed","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Layout","props","children","Home","href","target","rel","api","get","post","put","delete","apiCall","url","options","headers","fetch","then","response","status","contentType","indexOf","json","text","Error","statusText","data","catch","error","Promise","reject","resource","method","body","JSON","stringify","i","daysInWeek","ForecastsTable","forecasts","forecastAux","aria-labelledby","map","forecast","index","key","date","replace","number","Date","getDay","convertDate","substr","temperatureC","temperatureF","Weather","useQuery","api_","isLoading","isError","isSuccess","id","Counter","currentCount","setCurrentCount","aria-live","style","display","alignItems","justifyContent","flexWrap","flexWirection","CreateTodoListModal","onNewList","React","useRef","setIsOpen","name","setName","task","setTask","toggle","mutate","useMutation","todoList","length","console","log","icon","faPlus","Modal","ModalHeader","Form","onSubmit","event","preventDefault","onSuccess","ModalBody","FormGroup","Label","for","Input","required","type","value","onChange","e","alignContent","copyRows","push","row","updateTask","ModalFooter","Button","color","TodoLists","todoLists","selectedTodoList","setSelectedTodoList","todoTask","done","classNames","active","tasks","filter","t","countRemainingTasks","checked","setTaskCompleted","title","propTypes","Todos","refetch","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","refetchOnReconnect","client","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c6fe502b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction NavMenu() {\r\n    const [collapsed, setCollapsed] = useState(true);\r\n\r\n    return (\r\n        <header>\r\n            <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n                <Container>\r\n                    <NavbarBrand tag={Link} to=\"/\">Nerdino</NavbarBrand>\r\n                    <NavbarToggler onClick={() => setCollapsed(!collapsed)} className=\"mr-2\" />\r\n                    <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!collapsed} navbar>\r\n                        <ul className=\"navbar-nav flex-grow\">\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/weather\">Weather</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/todos\">Todos</NavLink>\r\n                            </NavItem>\r\n                        </ul>\r\n                    </Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default NavMenu;\r\n","import React from 'react';\r\nimport { Container } from 'reactstrap';\r\n\r\nimport NavMenu from './NavMenu';\r\n\r\nfunction Layout(props) {\r\n    return (\r\n        <div>\r\n            <NavMenu />\r\n            <Container>\r\n                {props.children}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <h1>Welcome to Nerdino!</h1>\r\n            <p>This is a single-page application built using PHP and React.</p>\r\n            <p>Good luck with your test. When you are done don't forget to remove the node_modules foler, zip the entire solution folder, and send it back.</p>\r\n            <p>Here are some additional resources to help you in your journey:</p>\r\n            <ul>\r\n                <li><a href='https://www.php.net/' target=\"_blank\" rel=\"noopener noreferrer\">PHP</a></li>\r\n                <li><a href='https://reactjs.org/' target=\"_blank\" rel=\"noopener noreferrer\">React</a> for client-side code</li>\r\n                <li><a href='https://getbootstrap.com/docs/4.4/getting-started/introduction/' target=\"_blank\" rel=\"noopener noreferrer\">Bootstrap 4.3.1</a></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","export const api = {\r\n    get,\r\n    post,\r\n    put,\r\n    delete: deleted\r\n};\r\n\r\nasync function apiCall(url, options) {\r\n    const headers = {\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n    };\r\n\r\n    options.headers = { ...options.headers, ...headers };\r\n    return fetch(`http://localhost/Nerdino_ReactAndPHP_Test/PHPAPIServer/api/${url}`, options)\r\n        .then(response => {\r\n            if (response.status >= 200 && response.status <= 299) {\r\n                const contentType = response.headers.get('content-type');\r\n\r\n                if (contentType && contentType.indexOf('application/json') !== -1) {\r\n                    return response.json();\r\n                } else {\r\n                    return response.text();\r\n                }\r\n            } else {\r\n                throw new Error(`${response.status} ${response.statusText}`);\r\n            }\r\n        })\r\n        .then(data => {\r\n            return data;\r\n        })\r\n        .catch(error => {\r\n            return Promise.reject(error);\r\n        });\r\n}\r\n\r\nasync function get(resource) {\r\n    const options = { method: 'GET' };\r\n\r\n    return await apiCall(resource, options);\r\n}\r\n\r\nasync function post(resource, data) {\r\n    const options = { method: 'POST', body: JSON.stringify(data) };\r\n\r\n    return await apiCall(resource, options);\r\n}\r\n\r\nasync function put(resource, data) {\r\n    const options = { method: 'PUT', body: JSON.stringify(data) };\r\n\r\n    return await apiCall(resource, options);\r\n}\r\n\r\nasync function deleted(resource) {\r\n    const options = { method: 'DELETE' };\r\n\r\n    return await apiCall(resource, options);\r\n}\r\n","import React from 'react';\r\nimport { useQuery } from 'react-query';\r\n\r\nimport { api } from '../utilities/api'\r\n\r\nconst daysInWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nfunction convertDate(date){\r\n    date.replace(' ', 'T');\r\n\r\n    // forecast.date\r\n    let newDate = new Date(date);\r\n    let number = newDate.getDay();\r\n    let nameDay = daysInWeek[number];\r\n    \r\n    // console.log(newDate);\r\n    return nameDay;\r\n}\r\n\r\n\r\nfunction ForecastsTable({ forecasts }) {\r\n    // const [WeatherForecast , setWeatherForecast ] = React.useState([]);\r\n    // // setWeatherForecast(forecasts);\r\n    \r\n    // // const [items, setItems] = React.useState([]);\r\n    // console.log(forecasts)\r\n    // React.useEffect(() => {\r\n    //     localStorage.setItem('WeatherForecast', JSON.stringify(forecasts));\r\n    //     console.log(localStorage.getItem(\"WeatherForecast\"));\r\n    //     // localStorage.getItem('myCat');\r\n    //     console.log(WeatherForecast);\r\n    // }, [WeatherForecast]);\r\n    let forecastAux =[];\r\n    // forecasts = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        forecastAux[i] = forecasts[i];\r\n        \r\n    }\r\n    forecasts = forecastAux;\r\n    // console.log(forecastAux)\r\n    return (\r\n        <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Day</th>\r\n                    <th>Date</th>\r\n                    <th>Temp. (C)</th>\r\n                    <th>Temp. (F)</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {forecasts.map((forecast, index) =>\r\n                    \r\n                    <tr key={index}>\r\n                        <td>{convertDate(forecast.date)}</td>\r\n                        <td>{ (forecast.date).substr(0,10) }</td>\r\n                        <td>{forecast.temperatureC}</td>\r\n                        <td>{forecast.temperatureF}</td>\r\n                    </tr>\r\n\r\n                    \r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nfunction Weather() {\r\n    \r\n    const { isLoading, isError, isSuccess, data } = useQuery(\"weatherForecast\", async () => {\r\n        let api_ = api.get(\"weatherforecast/weatherforecasts.php\"); \r\n       \r\n        return api_;\r\n    });\r\n    \r\n    \r\n\r\n    // React.useEffect(() => {\r\n    //     const items = JSON.parse(localStorage.getItem('WeatherForecast'));\r\n    //     if (items) {\r\n    //         setWeatherForecast(items);\r\n    //     }\r\n\r\n    //     console.log(WeatherForecast);\r\n    // }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n            <>\r\n                {isLoading && <p><em>Loading...</em></p>}\r\n                {isError && <p><em>Unable to retrieve data. Try again later.</em></p>}\r\n                {isSuccess && \r\n                \r\n                \r\n                <ForecastsTable forecasts={data } \r\n                // {this.setWeatherForecast()}\r\n                />}\r\n            </>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useState } from 'react';\r\n\r\n\r\n\r\nfunction operations(val){\r\n// console.log(\"HOLA\");\r\n}\r\n\r\nfunction Counter() {\r\n    const [currentCount, setCurrentCount] = useState(0);\r\n    // var value = () =>{\r\n    //     console.log(currentCount);\r\n    // }\r\n    // console.log(localStorage.getItem(\"items\"))\r\n    return (\r\n        <div>\r\n            <h1>Simple Counter</h1>\r\n            <p aria-live=\"polite\">Current count: <strong>{currentCount}</strong></p>\r\n            <div style={{display:\"flex\", alignItems: \"center\",justifyContent: \"space-evenly\",flexWrap: \"wrap\",flexWirection: \"row\"}}>\r\n                <button className=\"btn btn-primary\" onClick={() =>{ if(currentCount>9){return false} setCurrentCount(currentCount + 1)}}>Increment</button>\r\n                <button className=\"btn btn-primary\" onClick={() =>{ if(currentCount<1){return false} setCurrentCount(currentCount - 1)}}>Decrement</button>\r\n                <button className=\"btn btn-secondary\" onClick={() =>{ setCurrentCount(0)}}>Reset</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;\r\n","import React, { useState ,Component} from 'react';\r\nimport { useQuery, useMutation } from 'react-query';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport classNames from 'classnames'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Label, Input,Form } from 'reactstrap';\r\n// import PropTypes from 'prop-types'\r\nimport { api } from '../utilities/api'\r\nimport PropTypes from 'prop-types';\r\nfunction countRemainingTasks(todoList) {\r\n    return todoList.tasks.filter(t => !t.done).length;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nInput.propTypes = {\r\n    // TablePaginationActions.propTypes = {\r\n    //     count: PropTypes.number.isRequired,\r\n    //     onPageChange: PropTypes.func.isRequired,\r\n    //     page: PropTypes.number.isRequired,\r\n    //     rowsPerPage: PropTypes.number.isRequired,\r\n    //   };\r\n    // name:PropTypes.string.isRequired,\r\n    \r\n    // string.isRequired,\r\n//     children: PropTypes.node,\r\n//     // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\r\n//     type: PropTypes.string,\r\n//     size: PropTypes.string,\r\n//     bsSize: PropTypes.string,\r\n//     state: deprecated(PropTypes.string, 'Please use the prop \"valid\"'),\r\n//     valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\r\n//     invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\r\n//     tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n//     // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\r\n//     innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n//     static: deprecated(PropTypes.bool, 'Please use the prop \"plaintext\"'),\r\n//     plaintext: PropTypes.bool,\r\n//     addon: PropTypes.bool,\r\n//     className: PropTypes.string,\r\n//     cssModule: PropTypes.object,\r\n//   };CustomInput.propTypes = {\r\n//     className: PropTypes.string,\r\n//     id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n//     type: PropTypes.string.isRequired, // radio, checkbox, select, range.\r\n//     label: PropTypes.string, // used for checkbox and radios\r\n//     inline: PropTypes.bool,\r\n//     valid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\r\n//     invalid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\r\n//     bsSize: PropTypes.string,\r\n//     cssModule: PropTypes.object,\r\n//     children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\r\n//     // innerRef would be referenced to select node or input DOM node, depends on type property\r\n//     innerRef: PropTypes.oneOfType([\r\n//       PropTypes.object,\r\n//       PropTypes.string,\r\n//       PropTypes.func,\r\n//     ])\r\n  };\r\n\r\n\r\n\r\n\r\nfunction CreateTodoListModal(props) {\r\n    const { onNewList } = props;\r\n    const formRef = React.useRef();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [task, setTask] = useState([{name:\"\"}]);\r\n    var count = 0;\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    const onClickPlus = () => {\r\n        console.log(task);\r\n        // let size = post.length;\r\n        const copyRows = [...task];\r\n        copyRows.push({\"name\":\"\"});\r\n        // const copyRows = [{\"hola\":\"HOLA\"}];\r\n        // copyRows[size+1] = {\r\n        // ...copyRows[size+1],\r\n        // [\"hola\"]: 12\r\n        // };\r\n        setTask(copyRows)\r\n        console.log(\"NUEVO\");\r\n        console.log(copyRows);\r\n        return false;\r\n    }\r\n    const { mutate } = useMutation(todoList => {\r\n        return api.post(`todolist/todolist.php`, todoList);\r\n    });\r\n    const addNewTodoList2 = (event) =>\r\n    \r\n    {\r\n        \r\n            event.preventDefault();\r\n\r\n            // console.log(post);\r\n            // let newPara = { \"name\":name , \"task\":post};\r\n            mutate({ name,task}, {\r\n                onSuccess: () => {\r\n                    onNewList && onNewList();\r\n                    toggle();\r\n                }\r\n            });\r\n\r\n        // console.log(event);\r\n        return false;\r\n    }\r\n    function addNewTodoList() {\r\n        // console.log(post);\r\n        return false;\r\n        mutate({ name }, {\r\n            onSuccess: () => {\r\n                onNewList && onNewList();\r\n                toggle();\r\n            }\r\n        });\r\n    }\r\n\r\n    const HandleSubmit = () => {\r\n        // console.log( formRef.current);\r\n        // return false;\r\n    //     if (!formRef.current.check()) {\r\n    //     //   toaster.push(<Message type=\"error\">Error</Message>);\r\n          \r\n    //     //   return;\r\n    //   }\r\n    //   else{\r\n    //   }\r\n    }\r\n    \r\n    function varContinue(){\r\n        if(isOpen==false){\r\n            // setTask([{name:\"\"}]);   \r\n            \r\n            if(name!==\"\"){\r\n                setName(\"\");\r\n            }\r\n            if(task.length!==1){\r\n                // setName(\"\");\r\n                setTask([\r\n                {name:\"\"}\r\n            ]);    \r\n            }\r\n            \r\n        }\r\n        console.log(isOpen);    // isOpen\r\n    }\r\n\r\n    function updateTask(value,index){\r\n        // updateTask(e.target.value);\r\n        console.log(index);\r\n        const copyRows = [...task];\r\n        for (let i = 0; i < copyRows.length; i++) {\r\n            if(index==i){\r\n                copyRows[i].name=value;\r\n            }   \r\n            // const element = array[i];\r\n            \r\n        }\r\n        // copyRows[index] = {\r\n        //   ...copyRows[index],\r\n        //   [name]: value\r\n        // };\r\n        setTask(copyRows);\r\n        // console.log()\r\n    }\r\n\r\n    varContinue();\r\n    // varContinue;\r\n    \r\n    return (\r\n        <>\r\n            <button className=\"btn btn-default float-right\" onClick={toggle}>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </button>\r\n            <Modal isOpen={isOpen} toggle={toggle}>\r\n                <ModalHeader toggle={toggle}>New ToDo List</ModalHeader>\r\n                <Form\r\n                onSubmit={addNewTodoList2}\r\n                        // ref={formRef}\r\n                    >\r\n                <ModalBody>\r\n                    \r\n                        <FormGroup>\r\n                            <Label for=\"name\">Name</Label>\r\n                            <Input required type=\"text\" id=\"name\" name=\"name\" value={name} onChange={e => setName(e.target.value)} />\r\n                        </FormGroup>\r\n                        <FormGroup style={{display: \"flex\",justifyContent: \"flex-end\",alignItems: \"flex-end\",alignContent: \"stretch\"}}>\r\n                            <Label for=\"addTask\">Add task</Label>\r\n                            <button type='button' id=\"addTask\" className=\"btn btn-default float-right\" onClick={onClickPlus}>\r\n                                <FontAwesomeIcon icon={faPlus} />\r\n                            </button>\r\n                        </FormGroup>\r\n\r\n                        {/* <FormGroup>\r\n                            <Label for=\"task0\">Task 1</Label>\r\n                            <Input required type=\"text\" id=\"task0\" name=\"task0\" \r\n                            onChange={e => updateTask(e.target.value,0) }\r\n                            />\r\n                        </FormGroup> */}\r\n                        {task.map((row, index) => (\r\n\r\n                            <FormGroup key={\"keyTask\"+index}>\r\n\r\n                                <Label  for={\"task\"+(index)}>Task {(index+1)}</Label>\r\n                                <Input\r\n                                onChange={e => updateTask(e.target.value,index) }\r\n                                required type=\"text\" id={\"task\"+(index)} name={\"task\"+(index)} />\r\n\r\n                            </FormGroup>\r\n                        \r\n                        ))}\r\n                        \r\n                \r\n                    \r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"default\" onClick={toggle}>Cancel</Button>\r\n                    <Button color=\"primary\" type=\"submit\" \r\n                    // onSubmit={addNewTodoList2} \r\n                    // onSubmit={ () => {return false}}\r\n                     >Create</Button>\r\n                    {/* <Button color=\"primary\" onClick={() => addNewTodoList()}>Create</Button> */}\r\n                </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction TodoLists(props) {\r\n    const { todoLists, onNewList } = props;\r\n\r\n    const [selectedTodoList, setSelectedTodoList] = useState(todoLists[0]);\r\n\r\n    const { mutate } = useMutation(todoTask => {\r\n        if (todoTask.done) {\r\n            return api.delete(`todolist/todotasksundone.php?id=${todoTask.id}`);\r\n        }\r\n        else {\r\n            return api.put(`todolist/todotasksdone.php?id=${todoTask.id}`);\r\n        }\r\n    });\r\n\r\n    function setTaskCompleted(todoTask) {\r\n        console.log(todoTask);\r\n        mutate(todoTask, {\r\n            \r\n            onSuccess: (value) => {\r\n                console.log(value);\r\n\r\n                todoTask.done = !todoTask.done;\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-4\">\r\n                <div className=\"clearfix\">\r\n                    <h2 className=\"float-left\">Lists</h2>\r\n                    <CreateTodoListModal onNewList={onNewList} />\r\n                </div>\r\n                <ul className=\"list-group\">\r\n                    {todoLists && todoLists.map(todoList =>\r\n                        <li key={todoList.id} className={classNames(\"list-group-item\", { active: selectedTodoList.id === todoList.id })} onClick={() => setSelectedTodoList(todoList)}>\r\n                            <span className=\"float-left\">{todoList.name}</span>\r\n                            <span className=\"badge badge-light float-right\">{countRemainingTasks(todoList)} / {todoList.tasks.length}</span>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            <div className=\"col-sm-8\">\r\n                <div className=\"clearfix\">\r\n                    <h2 className=\"float-left\">{selectedTodoList.name}</h2>\r\n                </div>\r\n                <ul className=\"list-group\">\r\n                    {selectedTodoList && selectedTodoList.tasks && selectedTodoList.tasks.map(todoTask =>\r\n                        <li key={todoTask.id} className=\"list-group-item\">\r\n                            <input type=\"checkbox\" checked={todoTask.done} onChange={() => setTaskCompleted(todoTask)} />\r\n                            <span className={classNames(\"ml-2\", { done: todoTask.done })}>{todoTask.title}</span>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Todos() {\r\n    const { isLoading, isError, isSuccess, data, refetch } = useQuery(\"todolists\", async () => {\r\n        return api.get(\"todolist/todolists.php\");\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h1>ToDos</h1>\r\n            <>\r\n                {isLoading && <p><em>Loading...</em></p>}\r\n                {isError && <p><em>Unable to retrieve data. Try again later.</em></p>}\r\n                {isSuccess && <TodoLists todoLists={data} onNewList={() => refetch()} />}\r\n            </>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Route } from 'react-router';\r\nimport { QueryClient, QueryClientProvider } from 'react-query'\r\n\r\nimport Layout from './components/Layout';\r\nimport Home from './components/Home';\r\nimport Weather from './components/Weather';\r\nimport Counter from './components/Counter';\r\nimport Todos from './components/Todos';\r\n\r\nimport './custom.css'\r\n\r\nfunction App() {\r\n    const queryClient = new QueryClient({\r\n        defaultOptions: {\r\n            queries: {\r\n                refetchOnWindowFocus: false,\r\n                refetchOnReconnect: false\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            <Layout>\r\n                <Route exact path='/' component={Home} />\r\n                <Route path='/counter' component={Counter} />\r\n                <Route path='/weather' component={Weather} />\r\n                <Route path='/todos' component={Todos} />\r\n            </Layout>\r\n        </QueryClientProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename={baseUrl}>\r\n        <App />\r\n    </BrowserRouter>,\r\n    rootElement);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}